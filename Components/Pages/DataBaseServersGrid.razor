@page "/ServerGrid"
@inject IConfiguration _config

@rendermode InteractiveServer

<PageTitle>Таблица серверов</PageTitle>

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor
@using Grid_Dapper.Data;
@using System.Collections;
@using BlazorApp1.Components.Layout;
@inject IJSRuntime JSRuntime

<p>Сервер с самым большим количеством персонажей: @NameMax</p>

<SfGrid ID="ServersGrid" @ref="ServersGrid" TValue="Server" AllowSorting="true" AllowFiltering="false" AllowGrouping="false" AllowPaging="true" AllowExcelExport="true" Toolbar="@ToolbarList">
    <SfDataManager AdaptorInstance="@typeof(CustomAdaptor)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
    <GridEditSettings AllowEditing="mainLayout.IsAdmin" AllowDeleting="mainLayout.IsAdmin" AllowAdding="mainLayout.IsAdmin" Mode="@EditMode.Normal"></GridEditSettings>
    <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="Server"></GridEvents>
    <GridColumns>
        <GridColumn Field=@nameof(Server.Id) HeaderText="Id" IsIdentity IsPrimaryKey="true" Width="120"></GridColumn>
        <GridColumn Field=@nameof(Server.Name) HeaderText="Название" ValidationRules="@(new ValidationRules{ Required= true, MinLength = 3 })" ></GridColumn>
        <GridColumn Field=@nameof(Server.MaxCapacity) HeaderText="Максимальная вместимость" ></GridColumn>
        <GridColumn Field=@nameof(Server.Count) HeaderText="Количество персонажей на этом сервере"></GridColumn>
        <!--<GridForeignColumn Field=@nameof(Server.MaxCapacity) HeaderText="Максимальная вместимость" ForeignKeyValue="Id" ForeignDataSource="@classes"></GridForeignColumn>-->
    </GridColumns>
</SfGrid>

@code {

    SfGrid<Server> ServersGrid;
    private Lazy<IJSObjectReference> JSModule = new();
    private List<string> ToolbarList = new List<string>();
    [CascadingParameter]
    public MainLayout mainLayout { get; set; }

    public ServerData serverData = new ServerData();
    public List<Server> ServerDataSource = new List<Server>();
    public string NameMax;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        if (mainLayout.IsAdmin)
        {
            ToolbarList = new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel", "Search", "ExcelExport" };
        }
        else
        {
            ToolbarList = new List<string>() { "Search", "ExcelExport" };
        }
        ServerDataSource = await serverData.GetOrdersAsync();
        int max = -1;
        NameMax = "Персонажей нет";
        foreach (Server server in ServerDataSource)
        {
            if (server.Count > max) 
            {
                max = server.Count;
                NameMax = server.Name;
            }
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        JSModule = new(await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/JSRuntime.js"));
        Console.WriteLine(JSModule.Value);
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        Console.WriteLine("exp1");
        try
        {
            Console.WriteLine(args.Item.Id);
            if (args.Item.Id == "ServersGrid_excelexport") //Id is combination of Grid's ID and itemname
            {
                //await this.PlayersGrid.ExcelExport();
                Console.WriteLine("exp2");

                ExcelExportProperties ExcelProperties = new ExcelExportProperties();

                ExcelHeader header = new ExcelHeader();
                header.HeaderRows = 2;
                List<ExcelCell> cell = new List<ExcelCell>
                {
                    new ExcelCell() { RowSpan= 2,ColSpan=5 , Value= "Отчёт из базы данных серверов", Style = new ExcelStyle() { Bold = true, FontSize = 14, Italic= true, BackColor = "#bfbfbf", FontName = "Times New Roman"} }

                };
                List<ExcelRow> HeaderContent = new List<ExcelRow>
                {
                    new ExcelRow() {  Cells = cell, Index = 1 }
                };
                header.Rows = HeaderContent;

                ExcelFooter footer = new ExcelFooter();
                footer.FooterRows = 2;
                cell = new List<ExcelCell>
                {
                    new ExcelCell() { RowSpan= 2,ColSpan=5 , Value= ("Дата и время: " + DateTime.Now.ToString("dd.MM.yyyy HH:mm:ss")), Style = new ExcelStyle() { Bold = true, FontSize = 14, Italic= true, BackColor = "#bfbfbf", FontName = "Times New Roman" }}
                };
                List<ExcelRow> FooterContent = new List<ExcelRow>
                {
                    new ExcelRow() {  Cells = cell, Index = 1 }
                };
                footer.Rows = FooterContent;

                ExcelProperties.Header = header;
                ExcelProperties.Footer = footer;
                ExcelTheme Theme = new ExcelTheme();
                ExcelStyle ThemeStyle = new ExcelStyle()
                    {
                        FontName = "Times New Roman",
                        FontSize = 12
                    };
                ExcelStyle HeaderThemeStyle = new ExcelStyle()
                    {
                        FontName = "Times New Roman",
                        FontSize = 14,
                        Bold = true,
                        BackColor = "#bfbfbf"
                    };
                Theme.Header = HeaderThemeStyle;
                Theme.Record = ThemeStyle;
                Theme.Caption = ThemeStyle;
                ExcelProperties.Theme = Theme;
                MemoryStream streamDoc = await ServersGrid.ExportToExcelAsync(asMemoryStream: true, ExcelProperties);

                await JSModule.Value.InvokeVoidAsync("saveAsFile", new object[] { "Servers.xlsx", Convert.ToBase64String(streamDoc.ToArray()), true });

                Console.WriteLine("exp3");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            throw;
        }
    }

    public class CustomAdaptor : DataAdaptor
    {
        public ServerData ServerService = new ServerData();

        public override async Task<object> ReadAsync(DataManagerRequest DataManagerRequest, string Key = null)
        {
            Console.WriteLine(1);
            IEnumerable<Server> DataSource = await ServerService.GetOrdersAsync();
            Console.WriteLine(2);
            // Handling Searching in CustomAdaptor.
            if (DataManagerRequest.Search != null && DataManagerRequest.Search.Count > 0)
            {
                // Searching
                DataSource = DataOperations.PerformSearching(DataSource, DataManagerRequest.Search);
            }
            // Handling Filtering in CustomAdaptor.
            if (DataManagerRequest.Where != null && DataManagerRequest.Where.Count > 0)
            {
                // Filtering
                DataSource = DataOperations.PerformFiltering(DataSource, DataManagerRequest.Where, DataManagerRequest.Where[0].Operator);
            }
            // Handling Sorting in CustomAdaptor.
            if (DataManagerRequest.Sorted != null && DataManagerRequest.Sorted.Count > 0)
            {
                // Sorting
                DataSource = DataOperations.PerformSorting(DataSource, DataManagerRequest.Sorted);
            }
            int count = DataSource.Cast<Server>().Count();
            // Handling Aggregates in CustomAdaptor.
            IDictionary<string, object> Aggregates = null;
            if (DataManagerRequest.Aggregates != null) // Aggregation
            {
                Aggregates = DataUtil.PerformAggregation(DataSource, DataManagerRequest.Aggregates);
            }
            // Handling Paging in CustomAdaptor. For example, Skip is 0 and Take is equal to page size for first page.
            if (DataManagerRequest.Skip != 0)
            {
                //Paging
                DataSource = DataOperations.PerformSkip(DataSource, DataManagerRequest.Skip);
            }
            if (DataManagerRequest.Take != 0)
            {
                DataSource = DataOperations.PerformTake(DataSource, DataManagerRequest.Take);
            }
            // Handling Grouping in CustomAdaptor.
            DataResult DataObject = new DataResult();
            if (DataManagerRequest.Group != null)
            {
                IEnumerable ResultData = DataSource.ToList();
                // Grouping
                foreach (var group in DataManagerRequest.Group)
                {
                    ResultData = DataUtil.Group<Server>(ResultData, group, DataManagerRequest.Aggregates, 0, DataManagerRequest.GroupByFormatter);
                }
                DataObject.Result = ResultData;
                DataObject.Count = count;
                //If both Grouping and Aggregate is enabled
                if (DataManagerRequest.Aggregates != null)
                {
                    DataObject.Aggregates = Aggregates;
                }
                //Здесь RequiresCount передается со стороны элемента управления, когда требуется выборка данных по требованию, тогда RequiresCount устанавливается как true на стороне компонента.
                //В приведенном выше случае мы используем пейджинг, поэтому данные загружаются по требованию каждый раз, когда нажимается следующая страница на стороне Blazor DataGrid.
                return DataManagerRequest.RequiresCounts ? DataObject : (object)ResultData;
            }
            //Здесь RequiresCount передается со стороны элемента управления, когда требуется выборка данных по требованию, тогда RequiresCount устанавливается как true на стороне компонента.
            //В приведенном выше случае мы используем пейджинг, поэтому данные загружаются по требованию каждый раз, когда нажимается следующая страница на стороне Blazor DataGrid.
            return DataManagerRequest.RequiresCounts ? new DataResult() { Result = DataSource, Count = count, Aggregates = Aggregates } : (object)DataSource;
        }

        public override async Task<object> InsertAsync(DataManager DataManager, object Value, string Key)
        {
            // Given that the Value property consists of newly inserted record details. It can be used to insert the records into database by calling the predefined logic.
            await ServerService.AddOrderAsync(Value as Server);
            return Value;
        }

        public override async Task<object> UpdateAsync(DataManager DataManager, object Value, string KeyField, string Key)
        {
            // Given that the Value property consists of modified record details. It can be used to update the changes into database by calling the predefined logic.
            Console.WriteLine("Update" + Value);
            await ServerService.UpdateOrderAsync(Value as Server);
            Console.WriteLine("Updated" + Value);
            return Value;
        }

        public override async Task<object> RemoveAsync(DataManager DataManager, object Value, string KeyField, string Key)
        {
            // Given that the key column is identified nullable interger type in the DataGrid, the primaryColumnValue can be utilized from Value property directly.
            Console.WriteLine("Remove" + Value);
            await ServerService.RemoveOrderAsync(Value as int?);
            Console.WriteLine("Removed" + Value);
            return Value;
        }

        public override async Task<object> BatchUpdateAsync(DataManager DataManager, object Changed, object Added, object Deleted, string KeyField, string Key, int? DropIndex)
        {
            if (Changed != null)
            {
                foreach (var record in (IEnumerable<Server>)Changed)
                {
                    await ServerService.UpdateOrderAsync(record as Server);
                }
            }
            if (Added != null)
            {
                foreach (var record in (IEnumerable<Server>)Added)
                {
                    await ServerService.AddOrderAsync(record as Server);
                }
            }
            if (Deleted != null)
            {
                foreach (var record in (IEnumerable<Server>)Deleted)
                {
                    await ServerService.RemoveOrderAsync((record as Server).Id);
                }
            }
            return Key;
        }
    }
}